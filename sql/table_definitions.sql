/*
  Step 1: Run table_definitions.sql
  Step 2: Run stored_procedures.sql
  Step 3: Remove update/insert RLS policies on profiles
  Step 4: Remove unnecessary columns in profiles
  Step 5: Add profile dependent type if necessary:
    create type public.user_levels as enum (
      'user', 'contributor', 'active_contributor'
    );

*/

/* CLEAR EVERYTHING - DO NOT RUN IF EXISTING DATA IS NEEDED */
drop table if exists public.image_votes;
drop table if exists public.audio_votes;
drop table if exists public.translation_votes;
drop table if exists public.images;
drop table if exists public.translation_audio;
drop table if exists public.translations;
drop table if exists public.sentence_entities;
drop table if exists public.word_entities;
drop table if exists public.segment_entities;
drop table if exists public.sentences;
drop table if exists public.words_segments;
drop table if exists public.words;
drop table if exists public.segments;
drop table if exists public.countries;
drop type if exists public.difficulty;
drop type if exists public.word_category;
drop type if exists public.trust_slug;

/* WARNINGS ENDS */

/* 
  Set 'profiles' to: 
  id, username, avatar_file, user_level, updated_at
 */

/* Types */
create type public.difficulty as enum (
  'beginner', 'intermediate', 'advanced'
);

create type public.word_category as enum (
  'obj', 'loc', 'time', 'verb', 'verp', 'verc', 'vera', 'adj', 'phr'
);

create type public.trust_slug as enum (
  'initial', 'experimental', 'active', 'trusted'
);

/* Tables */
create table public.sentences (
  "id" int generated by default as identity primary key,
  "sentence" text not null,
  "sentence_structure" json,
  "difficulty" public.difficulty not null,
  "segment_id" smallint not null
);

create table public.words (
  "id" int generated by default as identity primary key,
  "word" text not null,
  "category" public.word_category not null,
  "for_segments" json
);

create table public.words_segments (
  "word_id" int,
  "segment_id" smallint
);

create table public.countries (
  "id" smallint generated by default as identity primary key,
  "country" varchar(3) unique not null,
  "trust_level" public.trust_slug default ('initial'),
  "progress" smallint default(0)
);

create table public.segments (
  "id" smallint generated by default as identity primary key,
  "segment" varchar(16) unique not null
);

create table public.word_entities (
  "id" int generated by default as identity primary key,
  "word_id" int,
  "country_id" smallint,
  "translated_word" text,
  "emoji" char
);

create table public.segment_entities (
  "id" int generated by default as identity primary key,
  "segment_id" smallint not null,
  "country_id" smallint not null
);

create table public.sentence_entities (
  "id" bigint generated by default as identity primary key,
  "sentence_id" bigint not null,
  "country_id" smallint not null,
  "images_count" smallint default 0,
  "translations_count" smallint default 0,
  "audio_count" smallint default 0,
  "created_at" timestamp with time zone default timezone('utc'::text, now()) not null,
  unique ("sentence_id", "country_id")
);

create table public.images (
  "id" bigint generated by default as identity primary key,
  "sentence_id" bigint not null,
  "filename" text not null,
  "submitted_by" uuid,
  "created_at" timestamp with time zone default timezone('utc'::text, now()) not null,
  unique ("sentence_id", "submitted_by")
);

create table public.image_votes (
  "image_id" int not null,
  "voted_by" uuid not null,
  "upvote" boolean not null,
  "updated_at" timestamp with time zone default timezone('utc'::text, now()) not null,
  primary key ("image_id", "voted_by")
);

create table public.translation_audio (
  "id" bigint generated by default as identity primary key,
  "translation_id" bigint not null,
  "filename" text not null,
  "submitted_by" uuid,
  "created_at" timestamp with time zone default timezone('utc'::text, now()) not null,
  unique ("translation_id", "submitted_by")
);

create table public.audio_votes (
  "audio_id" bigint not null,
  "voted_by" uuid not null,
  "upvote" boolean not null,
  "updated_at" timestamp with time zone default timezone('utc'::text, now()) not null,
  primary key ("audio_id", "voted_by")
);

create table public.translations (
  "id" bigint generated by default as identity primary key,
  "sentence_id" bigint not null,
  "translation" text not null,
  "translation_structure" json,
  "submitted_by" uuid,
  "created_at" timestamp with time zone default timezone('utc'::text, now()) not null,
  unique ("sentence_id", "submitted_by")
);

create table public.translation_votes (
  "translation_id" bigint not null,
  "voted_by" uuid not null,
  "upvote" boolean not null,
  "updated_at" timestamp with time zone default timezone('utc'::text, now()) not null,
  primary key ("translation_id", "voted_by")
);

/* Keys */
alter table public.sentence_entities
add foreign key ("sentence_id") references public.sentences ("id");

alter table public.sentence_entities
add foreign key ("country_id") references public.countries ("id");

alter table public.word_entities
add foreign key ("word_id") references public.words ("id");

alter table public.word_entities
add foreign key ("country_id") references public.countries ("id");

alter table public.segment_entities
add foreign key ("segment_id") references public.segments ("id");

alter table public.segment_entities
add foreign key ("country_id") references public.countries ("id");

alter table public.sentences
add foreign key ("segment_id") references public.segments ("id");

alter table public.words_segments
add foreign key ("segment_id") references public.segments ("id");

alter table public.words_segments
add foreign key ("word_id") references public.words ("id");

alter table public.images
add foreign key ("sentence_id") references public.sentence_entities ("id");

alter table public.images
add foreign key ("submitted_by") references public.profiles ("id")
on delete set null;

alter table public.image_votes
add foreign key ("image_id") references public.images ("id")
on delete cascade;

alter table public.image_votes
add foreign key ("voted_by") references public.profiles ("id")
on delete cascade;

alter table public.translation_audio
add foreign key ("translation_id") references public.translations ("id") 
on delete cascade;

alter table public.translation_audio
add foreign key ("submitted_by") references public.profiles ("id")
on delete set null;

alter table public.audio_votes
add foreign key ("audio_id") references public.translation_audio ("id")
on delete cascade;

alter table public.audio_votes
add foreign key ("voted_by") references public.profiles ("id")
on delete cascade;

alter table public.translations
add foreign key ("sentence_id") references public.sentence_entities ("id");

alter table public.translations
add foreign key ("submitted_by") references public.profiles ("id")
on delete set null;

alter table public.translation_votes
add foreign key ("translation_id") references public.translations ("id")
on delete cascade;

alter table public.translation_votes
add foreign key ("voted_by") references public.profiles ("id")
on delete cascade;

/* Policies */

alter table public.image_votes enable row level security;
alter table public.audio_votes enable row level security;
alter table public.translation_votes enable row level security;
alter table public.images enable row level security;
alter table public.translation_audio enable row level security;
alter table public.translations enable row level security;
alter table public.sentence_entities enable row level security;
alter table public.segment_entities enable row level security;
alter table public.sentences enable row level security;
alter table public.segments enable row level security;
alter table public.countries enable row level security;
alter table public.words enable row level security;
alter table public.words_segments enable row level security;
alter table public.word_entities enable row level security;

/* Fillers */
insert into public.countries (country)
values ('en'), ('pl'), ('hu'), ('dk');

insert into public.segments (segment)
values ('home'), ('shop'), ('street'), ('journey'), ('party');

/* >> Run segment filler file */


insert into public.sentences (sentence, sentence_structure, difficulty, segment_id)
values 
  (
    'Can you pass me the salt?', '[{ "at": [1, 3], "is": "vera" }, { "at": 6, "is": "obj" }]', 'intermediate', (
      select id
      from public.segments
      where id = 1
  )),
  (
    'Where is the restroom?', '[{ "at": 4, "is": "loc" }]', 'intermediate', (
      select id
      from public.segments
      where id = 1
  )),
  (
    'I like your painting.', '[{ "at": 2, "is": "verb" }, { "at": 4, "is": "obj" }]', 'beginner', (
      select id
      from public.segments
      where id = 1
  )),
  (
    'Do you have any tissues?', '[{ "at": 5, "is": "obj" }]', 'intermediate', (
      select id
      from public.segments
      where id = 1
  )),
  (
    'Please, come in!', '[{ "at": [2, 3], "is": "phr" }]', 'beginner', (
      select id
      from public.segments
      where id = 1
  )),
  (
    'The door is on the left.', '[{ "at": 2, "is": "obj" }, { "at": 6, "is": "loc" }]', 'intermediate', (
      select id
      from public.segments
      where id = 1
  )),
  (
    'We should watch TV!', '[{ "at": 4, "is": "obj" }]', 'intermediate', (
      select id
      from public.segments
      where id = 1
  )),
  (
    'Shoot, I forgot the wine.', '[{ "at": 1, "is": "phr" }, { "at": 3, "is": "verp" }, { "at": 5, "is": "obj" }]', 'intermediate', (
      select id
      from public.segments
      where id = 1
  )),
  (
    'How much does one bottle cost?', '[{ "at": 5, "is": "obj" }, { "at": 6, "is": "verb" }]', 'intermediate', (
      select id
      from public.segments
      where id = 2
  )),
  (
    'Thank you, goodbye!', '[{ "at": 3, "is": "phr" }]', 'beginner', (
      select id
      from public.segments
      where id = 2
  )),
  (
    'Go left and walk straight ahead', '[{ "at": 1, "is": "verc" }, { "at": 2, "is": "loc" }, { "at": 4, "is": "verc" }]', 'intermediate', (
      select id
      from public.segments
      where id = 3
  )),
  (
    'Excuse me, you dropped this.', '[{ "at": 4, "is": "verp" }]', 'intermediate', (
      select id
      from public.segments
      where id = 3
  )),
  (
    'Hi, what is your name?', '[{ "at": 5, "is": "obj" }]', 'beginner', (
      select id
      from public.segments
      where id = 3
  ));

insert into public.segment_entities (segment_id, country_id) values ((select id from public.segments where id = 1 ),  (select id from public.countries where id = 1 )),((select id from public.segments where id = 2 ),  (select id from public.countries where id = 1 )),((select id from public.segments where id = 3 ),  (select id from public.countries where id = 1 )),((select id from public.segments where id = 4 ),  (select id from public.countries where id = 1 )),((select id from public.segments where id = 5 ),  (select id from public.countries where id = 1 )),((select id from public.segments where id = 1 ),  (select id from public.countries where id = 2 )),((select id from public.segments where id = 2 ),  (select id from public.countries where id = 2 )),((select id from public.segments where id = 3 ),  (select id from public.countries where id = 2 )),((select id from public.segments where id = 4 ),  (select id from public.countries where id = 2 )),((select id from public.segments where id = 5 ),  (select id from public.countries where id = 2 )),((select id from public.segments where id = 1 ),  (select id from public.countries where id = 3 )),((select id from public.segments where id = 2 ),  (select id from public.countries where id = 3 )),((select id from public.segments where id = 3 ),  (select id from public.countries where id = 3 )),((select id from public.segments where id = 4 ),  (select id from public.countries where id = 3 )),((select id from public.segments where id = 5 ),  (select id from public.countries where id = 3 )),((select id from public.segments where id = 1 ),  (select id from public.countries where id = 4 )),((select id from public.segments where id = 2 ),  (select id from public.countries where id = 4 )),((select id from public.segments where id = 3 ),  (select id from public.countries where id = 4 )),((select id from public.segments where id = 4 ),  (select id from public.countries where id = 4 )),((select id from public.segments where id = 5 ),  (select id from public.countries where id = 4 ));